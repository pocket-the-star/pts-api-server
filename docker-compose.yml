networks:
  app_network:
    driver: bridge
    name: app_network

volumes:
  mysql_data:

services:
  mysql:
    image: mysql:8.0
    container_name: mysql_container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-p${MYSQL_PASSWORD}" ]
      interval: 3s
      timeout: 2s
      retries: 10
      start_period: 10s
    networks:
      - app_network

  redis:
    image: redis:7.0
    hostname: "${REDIS_HOST}"
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 2s
      retries: 5
    networks:
      - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_container
    environment:
      ZOOKEEPER_CLIENT_PORT: "${ZOOKEEPER_CLIENT_PORT}"
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    networks:
      - app_network

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1_container
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: "${KAFKA_BROKER_ID1}"
      KAFKA_ZOOKEEPER_CONNECT: "${KAFKA_ZOOKEEPER_CONNECT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}"
      KAFKA_ADVERTISED_LISTENERS: "${KAFKA_ADVERTISED_LISTENERS1}"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}"
    ports:
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT1}:${KAFKA_EXTERNAL_PORT1}"
    networks:
      - app_network

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2_container
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: "${KAFKA_BROKER_ID2}"
      KAFKA_ZOOKEEPER_CONNECT: "${KAFKA_ZOOKEEPER_CONNECT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}"
      KAFKA_ADVERTISED_LISTENERS: "${KAFKA_ADVERTISED_LISTENERS2}"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}"
    ports:
      - "${KAFKA_INTERNAL_PORT2}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT2}:${KAFKA_EXTERNAL_PORT2}"
    networks:
      - app_network

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3_container
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: "${KAFKA_BROKER_ID3}"
      KAFKA_ZOOKEEPER_CONNECT: "${KAFKA_ZOOKEEPER_CONNECT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}"
      KAFKA_ADVERTISED_LISTENERS: "${KAFKA_ADVERTISED_LISTENERS3}"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}"
    ports:
      - "${KAFKA_INTERNAL_PORT3}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT3}:${KAFKA_EXTERNAL_PORT3}"
    networks:
      - app_network

  api_test:
    build:
      context: .
      dockerfile: Dockerfile
      target: tester
    container_name: api_test_container
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - app_network

  api_run:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: api_container
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      zookeeper:
        condition: service_started
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - app_network